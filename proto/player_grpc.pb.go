// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: proto/player.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerServiceClient is the client API for PlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerServiceClient interface {
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (PlayerService_PlayClient, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextResponse, error)
	Prev(ctx context.Context, in *PrevRequest, opts ...grpc.CallOption) (*PrevResponse, error)
	AddSong(ctx context.Context, opts ...grpc.CallOption) (PlayerService_AddSongClient, error)
	DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
	UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error)
}

type playerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerServiceClient(cc grpc.ClientConnInterface) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (PlayerService_PlayClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlayerService_ServiceDesc.Streams[0], "/proto.PlayerService/Play", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerServicePlayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlayerService_PlayClient interface {
	Recv() (*PlayResponse, error)
	grpc.ClientStream
}

type playerServicePlayClient struct {
	grpc.ClientStream
}

func (x *playerServicePlayClient) Recv() (*PlayResponse, error) {
	m := new(PlayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerServiceClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, "/proto.PlayerService/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextResponse, error) {
	out := new(NextResponse)
	err := c.cc.Invoke(ctx, "/proto.PlayerService/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) Prev(ctx context.Context, in *PrevRequest, opts ...grpc.CallOption) (*PrevResponse, error) {
	out := new(PrevResponse)
	err := c.cc.Invoke(ctx, "/proto.PlayerService/Prev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) AddSong(ctx context.Context, opts ...grpc.CallOption) (PlayerService_AddSongClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlayerService_ServiceDesc.Streams[1], "/proto.PlayerService/AddSong", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerServiceAddSongClient{stream}
	return x, nil
}

type PlayerService_AddSongClient interface {
	Send(*AddSongRequest) error
	CloseAndRecv() (*AddSongResponse, error)
	grpc.ClientStream
}

type playerServiceAddSongClient struct {
	grpc.ClientStream
}

func (x *playerServiceAddSongClient) Send(m *AddSongRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playerServiceAddSongClient) CloseAndRecv() (*AddSongResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddSongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerServiceClient) DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, "/proto.PlayerService/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error) {
	out := new(UpdateSongResponse)
	err := c.cc.Invoke(ctx, "/proto.PlayerService/UpdateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServiceServer is the server API for PlayerService service.
// All implementations must embed UnimplementedPlayerServiceServer
// for forward compatibility
type PlayerServiceServer interface {
	Play(*PlayRequest, PlayerService_PlayServer) error
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	Next(context.Context, *NextRequest) (*NextResponse, error)
	Prev(context.Context, *PrevRequest) (*PrevResponse, error)
	AddSong(PlayerService_AddSongServer) error
	DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error)
	mustEmbedUnimplementedPlayerServiceServer()
}

// UnimplementedPlayerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerServiceServer struct {
}

func (UnimplementedPlayerServiceServer) Play(*PlayRequest, PlayerService_PlayServer) error {
	return status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedPlayerServiceServer) Pause(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPlayerServiceServer) Next(context.Context, *NextRequest) (*NextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedPlayerServiceServer) Prev(context.Context, *PrevRequest) (*PrevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prev not implemented")
}
func (UnimplementedPlayerServiceServer) AddSong(PlayerService_AddSongServer) error {
	return status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlayerServiceServer) DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedPlayerServiceServer) UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedPlayerServiceServer) mustEmbedUnimplementedPlayerServiceServer() {}

// UnsafePlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServiceServer will
// result in compilation errors.
type UnsafePlayerServiceServer interface {
	mustEmbedUnimplementedPlayerServiceServer()
}

func RegisterPlayerServiceServer(s grpc.ServiceRegistrar, srv PlayerServiceServer) {
	s.RegisterService(&PlayerService_ServiceDesc, srv)
}

func _PlayerService_Play_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServiceServer).Play(m, &playerServicePlayServer{stream})
}

type PlayerService_PlayServer interface {
	Send(*PlayResponse) error
	grpc.ServerStream
}

type playerServicePlayServer struct {
	grpc.ServerStream
}

func (x *playerServicePlayServer) Send(m *PlayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PlayerService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerService/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerService/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_Prev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).Prev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerService/Prev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).Prev(ctx, req.(*PrevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_AddSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlayerServiceServer).AddSong(&playerServiceAddSongServer{stream})
}

type PlayerService_AddSongServer interface {
	SendAndClose(*AddSongResponse) error
	Recv() (*AddSongRequest, error)
	grpc.ServerStream
}

type playerServiceAddSongServer struct {
	grpc.ServerStream
}

func (x *playerServiceAddSongServer) SendAndClose(m *AddSongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playerServiceAddSongServer) Recv() (*AddSongRequest, error) {
	m := new(AddSongRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PlayerService_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerService/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).DeleteSong(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlayerService/UpdateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).UpdateSong(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerService_ServiceDesc is the grpc.ServiceDesc for PlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pause",
			Handler:    _PlayerService_Pause_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _PlayerService_Next_Handler,
		},
		{
			MethodName: "Prev",
			Handler:    _PlayerService_Prev_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _PlayerService_DeleteSong_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _PlayerService_UpdateSong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Play",
			Handler:       _PlayerService_Play_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddSong",
			Handler:       _PlayerService_AddSong_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/player.proto",
}
